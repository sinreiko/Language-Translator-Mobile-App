$(window).on('load', function(){
//    npm install --save @google-cloud/translate
    // OCR
    // on take pic
    $('input#file-input').change(function(e) {
        alert("somebodeh toucha ma spaghett");
        
        /* From google, but require() is not defined -> need npm? browserify?
        // Read the file into memory.
        var fs = require('fs');
        var imageFile = fs.readFileSync('C:\Users\MyGamingPC\OneDrive\Pictures\original.png');

        // Covert the image data to a Buffer and base64 encode it.
        var encoded = new Buffer(imageFile).toString('base64');*/
        
        // .val returns fakepath, .src returns blank url
        /*var imgFullURL = document.querySelector('#file-input').src;
//        var imgFullURL = $('input#file-input')[0].src;
        console.log($("#file-input").val())
        ;
        alert(imgFullURL);*/

        /*const fileInput = document.getElementById('file-input');

        fileInput.addEventListener('change', (e) => doSomethingWithFiles(e.target.files));*/

        /*var files = e.target.files;
        console.log(getPath(files));*/

        /*var base64 = Uri.parse(files);
        console.log(base64);*/

        
        /*// convert img to base64 
        function toDataURL(url, callback) {
          var xhr = new XMLHttpRequest();
          xhr.onload = function() {
            var reader = new FileReader();
            reader.onloadend = function() {
              callback(reader.result);
            }
            reader.readAsDataURL(xhr.response);
          };
          xhr.open('GET', url);
          xhr.responseType = 'blob';
          xhr.send();
        }

        // need to put url of image below but dk how to get img url
        toDataURL('http://1.bp.blogspot.com/-IN3cLUqDng8/VS6Cga5_JKI/AAAAAAAAGiw/rC5Lkppxkm8/w1200-h630-p-k-no-nu/Ubuntu%2B14.04%2B-%2BText%2BEntry%2B-%2BJapanese%2BAnthy%2B-%2BHiragana%2B-%2Bhontouni.jpg', function(dataUrl) {
          console.log('RESULT:', dataUrl)
        })*/

        /*// save base64 as a var to be inputted into request below
        base64 = dataUrl;*/
         
    });

    //json data
    //needs base64
    // currently has a picture but will be replaced with base64 var from above
    var request = {
      "requests": [{
        "image": {
          "content": ""
        },
        "features": [{
          "type": "TEXT_DETECTION"
        }]
      }]
    };

    //make query
    $.ajax({
      type: "POST",
      url: "https://vision.googleapis.com/v1/images:annotate?key=AIzaSyCTS8ehkSmL0Da4vC8N4gEo6YstpLITrYQ",
      contentType: 'application/json',//must have
      data: JSON.stringify(request), //make into json
      processData: false,
      success: function (data) {
          var extractedText = data.responses[0].fullTextAnnotation.text;
          $("p#extractedtext").text(`${extractedText}`);
      },
      error: function (data, textStatus, errorThrown) {
        console.log('error: ' + data);
      }
    })
    
    ////////////////////////////////////////////////////////
    // Translate text - requires require() which is not working? need npm?? how pls
    // Imports the Google Cloud client library
    /*const Translate = require('@google-cloud/translate');

    // Your Google Cloud Platform project ID
    const projectId = 'vertical-set-192207';

    // Instantiates a client
    const translate = new Translate({
      projectId: projectId,
    });

    // The text to translate
    const text = "ほんとうか"; // use $("p#extractedtext").text() when the time comes
    // The target language
    const target = 'en';

    // Translates some text into Russian
    translate
      .translate(text, target)
      .then(results => {
        const translation = results[0];

        console.log(`Text: ${text}`);
        console.log(`Translation: ${translation}`);
      })
      .catch(err => {
        console.error('ERROR:', err);
      });*/
})
